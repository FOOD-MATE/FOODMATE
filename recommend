import pandas as pd
import numpy as np

# 데이터 파일 불러오기
df = pd.read_csv('foodData4_24.csv')

# 코사인 유사도 계산 함수
def cosine_similarity(vector_a, vector_b):
    dot_product = np.dot(vector_a, vector_b)
    norm_a = np.linalg.norm(vector_a)
    norm_b = np.linalg.norm(vector_b)
    similarity = dot_product / (norm_a * norm_b)
    return similarity

# 사용자가 원하는 영양성분 입력
user_input = input("원하는 영양 성분을 입력하세요 (ex:단백질, 지방, 탄수화물 순서로): ")
user_vector = np.array([float(x) for x in user_input.split(',')])

# 최대 유사도와 그에 해당하는 식단 초기화
max_similarity = -1
recommended_diet = None

# 각 식단과의 코사인 유사도 계산 및 최대 유사도 식단 찾기
for idx, row in df.iterrows():
    diet_vector = row[['단백질', '지방', '탄수화물']].values
    similarity = cosine_similarity(user_vector, diet_vector)
    if similarity > max_similarity:
        max_similarity = similarity
        recommended_diet = row['식단명']

print("추천 식단:", recommended_diet)


#### 직관적이긴하나 다소 성능저하될수있음


import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# 데이터 파일 불러오기
df = pd.read_csv('foodData4_24.csv')

# 사용자 입력 받기
print("영양 성분을 입력하세요.")
print("예시: '단백질, 지방, 탄수화물'")
print("각 영양 성분의 값을 쉼표로 구분하여 입력하세요.")
user_input = input("원하는 영양 성분을 입력하세요: ")

# 사용자 입력을 배열로 변환하여 넘파이 배열로 변환
user_vector = np.array([float(x) for x in user_input.split(',')]).reshape(1, -1)

# 각 식단과의 코사인 유사도 계산
diet_vectors = df[['단백질', '지방', '탄수화물']].values
similarities = cosine_similarity(user_vector, diet_vectors)

# 가장 유사한 식단 추천
max_similarity_idx = np.argmax(similarities)
recommended_diet = df.loc[max_similarity_idx, '식단명']

print("추천 식단:", recommended_diet)

####cosine_similarity 함수를 사용하여 코사인 유사도를 계산하고 벡터간의 코사인 유사도를 효율적으로 계산할수있음